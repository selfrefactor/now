{"id":"node_modules/@sentry/core/esm/index.js","dependencies":[{"name":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js.map","includedInParent":true,"mtime":1565256417082},{"name":"/home/s/repos/now/packages/reddit-viewer/package.json","includedInParent":true,"mtime":1565256552351},{"name":"/home/s/repos/now/packages/reddit-viewer/.babelrc","includedInParent":true,"mtime":1555741353703},{"name":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/package.json","includedInParent":true,"mtime":1565256417082},{"name":"@sentry/minimal","loc":{"line":1,"column":106},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/minimal/esm/index.js"},{"name":"@sentry/hub","loc":{"line":2,"column":86},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/hub/esm/index.js"},{"name":"./api","loc":{"line":3,"column":20},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/api.js"},{"name":"./baseclient","loc":{"line":4,"column":27},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/baseclient.js"},{"name":"./basebackend","loc":{"line":5,"column":28},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/basebackend.js"},{"name":"./dsn","loc":{"line":6,"column":20},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/dsn.js"},{"name":"./sdk","loc":{"line":7,"column":28},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/sdk.js"},{"name":"./transports/noop","loc":{"line":8,"column":30},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/transports/noop.js"},{"name":"./integrations","loc":{"line":9,"column":30},"parent":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/index.js","resolved":"/home/s/repos/now/packages/reddit-viewer/node_modules/@sentry/core/esm/integrations/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"addBreadcrumb\", {\n  enumerable: true,\n  get: function () {\n    return _minimal.addBreadcrumb;\n  }\n});\nObject.defineProperty(exports, \"captureException\", {\n  enumerable: true,\n  get: function () {\n    return _minimal.captureException;\n  }\n});\nObject.defineProperty(exports, \"captureEvent\", {\n  enumerable: true,\n  get: function () {\n    return _minimal.captureEvent;\n  }\n});\nObject.defineProperty(exports, \"captureMessage\", {\n  enumerable: true,\n  get: function () {\n    return _minimal.captureMessage;\n  }\n});\nObject.defineProperty(exports, \"configureScope\", {\n  enumerable: true,\n  get: function () {\n    return _minimal.configureScope;\n  }\n});\nObject.defineProperty(exports, \"withScope\", {\n  enumerable: true,\n  get: function () {\n    return _minimal.withScope;\n  }\n});\nObject.defineProperty(exports, \"addGlobalEventProcessor\", {\n  enumerable: true,\n  get: function () {\n    return _hub.addGlobalEventProcessor;\n  }\n});\nObject.defineProperty(exports, \"getCurrentHub\", {\n  enumerable: true,\n  get: function () {\n    return _hub.getCurrentHub;\n  }\n});\nObject.defineProperty(exports, \"Hub\", {\n  enumerable: true,\n  get: function () {\n    return _hub.Hub;\n  }\n});\nObject.defineProperty(exports, \"getHubFromCarrier\", {\n  enumerable: true,\n  get: function () {\n    return _hub.getHubFromCarrier;\n  }\n});\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function () {\n    return _hub.Scope;\n  }\n});\nObject.defineProperty(exports, \"API\", {\n  enumerable: true,\n  get: function () {\n    return _api.API;\n  }\n});\nObject.defineProperty(exports, \"BaseClient\", {\n  enumerable: true,\n  get: function () {\n    return _baseclient.BaseClient;\n  }\n});\nObject.defineProperty(exports, \"BaseBackend\", {\n  enumerable: true,\n  get: function () {\n    return _basebackend.BaseBackend;\n  }\n});\nObject.defineProperty(exports, \"Dsn\", {\n  enumerable: true,\n  get: function () {\n    return _dsn.Dsn;\n  }\n});\nObject.defineProperty(exports, \"initAndBind\", {\n  enumerable: true,\n  get: function () {\n    return _sdk.initAndBind;\n  }\n});\nObject.defineProperty(exports, \"NoopTransport\", {\n  enumerable: true,\n  get: function () {\n    return _noop.NoopTransport;\n  }\n});\nexports.Integrations = void 0;\n\nvar _minimal = require(\"@sentry/minimal\");\n\nvar _hub = require(\"@sentry/hub\");\n\nvar _api = require(\"./api\");\n\nvar _baseclient = require(\"./baseclient\");\n\nvar _basebackend = require(\"./basebackend\");\n\nvar _dsn = require(\"./dsn\");\n\nvar _sdk = require(\"./sdk\");\n\nvar _noop = require(\"./transports/noop\");\n\nvar Integrations = _interopRequireWildcard(require(\"./integrations\"));\n\nexports.Integrations = Integrations;\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }","map":{"mappings":[{"source":"../src/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":110,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":112,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":114,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":116,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":118,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":120,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":122,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":124,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":126,"column":0}}],"sources":{"../src/index.ts":"export {\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  withScope,\n} from '@sentry/minimal';\nexport { addGlobalEventProcessor, getCurrentHub, Hub, getHubFromCarrier, Scope } from '@sentry/hub';\nexport { API } from './api';\nexport { BaseClient } from './baseclient';\nexport { BackendClass, BaseBackend } from './basebackend';\nexport { Dsn } from './dsn';\nexport { initAndBind, ClientClass } from './sdk';\nexport { NoopTransport } from './transports/noop';\n\nimport * as Integrations from './integrations';\n\nexport { Integrations };\n"},"lineCount":null}},"hash":"cb124978e217bbccdb7bf37d1a5a4d1e","cacheData":{"env":{}}}